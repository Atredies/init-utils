# Note: This playbook works only for debian servers

# This playbook is used for the initial server configuration of Debian Servers

# To run this playbook use:
# ansible-playbook -i </ansible/location/to/inventory/hosts> </ansible/location/to/playbooks/initial_server_config.yml> --user root --ask-pass

# Note: Update $USERNAME with usernames you require

- hosts: initial_config
  become: true
  vars:
    conf_location: </path/to/templates/> # You should update this with the templates folder on your ansible server
  vars_prompt:
  - name: new_password
    prompt: "Enter new password for technical user"
  tasks:

###############################################
#               SERVER MAINTAINANCE           #
###############################################

# Upgrade Server Packages:
    - name: Upgrade Packages
      apt:
        update_cache: yes
        upgrade: 'dist'

# Install Required Packages:
    - name: Install required Packages
      apt:
        state: present
        name:
        # Packages below to be installed
          - sudo
          - unattended-upgrades
          - apt-listchanges
          - vim
          - qemu-guest-agent # This one is required if you run the server on Proxmox
          - curl
          - wget
          - ufw
          - fail2ban
          - acl
          - net-tools

# Install Docker:
    - name: Install Docker Dependency
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

# Add GPG Key:
    - name: Add GPG Key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

# Add apt Repository:
    - name: Add Docker Repository to apt
      apt_repository:
        repo: deb https://download.docker.com/linux/debian buster stable
        state: present
    
# Install Docker & docker-cli and conteiner.io:
    - name: Install Docker
      apt:
        name: "{{item}}"
        state: latest
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io

# Start & Enable Docker Service:

    - name: Start & Enable Docker
      service:
        name: docker
        state: started
        enabled: yes

# Configure Correct Date & Time:
    - name: Copy over the timesyncd config
      template: src='{{ conf_location }}/timesyncd.conf' dest=/etc/systemd/timesyncd.conf

    - name: Copy over the timezone config
      template: src='{{ conf_location }}/timezone.conf' dest=/etc/timezone

    - name: Timedatectl set to Bucharest
      become: yes
      command: "timedatectl set-timezone Europe/Bucharest"

# Configure Firewall to allow only SSH Access:
    - name: UFW - Allow SSH
      ufw: 
        rule: allow 
        name: OpenSSH
    
    - name: UFW - Deny all other incoming traffic
      ufw: 
        state: enabled 
        policy: deny
        direction: incoming

# Configure Fail2Ban:
    - name: Copy over the fail2ban config
      template: src='{{ conf_location }}/jail.conf' dest=/etc/fail2ban/jail.local

# Restart Fail2ban: 
    - name: Restart Fail2Ban
      systemd:
        name: fail2ban.service
        state: restarted

###############################################
#               USERS & GROUPS                #
###############################################

# Group Creation:
# Create Groups required for the system:
    - name: Create Groups for System
      group: 
        name: "{{ item }}"
        state: present
      with_items:
        - $USERNAME # You should update this with the groups that you would require
        - $USERNAME # This as well

# User Creation:
# Create Users required for the system:
    - name: Create Required Users
      user:
        name: "{{ item }}"
        state: present
        groups: "{{ item }}"
        shell: /bin/bash
      with_items:
        - $USERNAME # You should update this with the users that you would require
        - $USERNAME # This as well

# Prompt for user Password:
    - name: Change Password
      user:
        name: "{{ item }}"
        update_password: always
        password: "{{ new_password|password_hash('sha512') }}"
      with_items:
        - $USERNAME # Update this with the technical user that you are going to be using

# Lock system user Password:
    - name: Lock system user Password
      user:
        name: "{{ item }}"
        password_lock: yes
      with_items:
        - $USERNAME # Update this with the users that you require the password to be locked for

# Copy bashrc conf to SSH user

    - name: Copy over the timezone config

      # Update the template below with the destination folder of the user you want to ssh into
      template: src='{{ conf_location }}/bashrc.conf' dest=/home/$USERNAME/.bashrc

# Add Users to sudo group:
    - name: Add Users to sudo group
      user:
        name: "{{ item }}"
        groups: sudo
        append: yes
      with_items:
        - $USERNAME # Update this with the user you require added to the sudo group

# Add Users to docker group:
    - name: Add Users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      with_items:
        - $USERNAME # Update this with user with access to docker

###############################################
#               SSH ACCESS                    #
###############################################

# Copy Authorized Keys file over to server:

# Create SSH Key directory:
# Note: Duplicate this if you require additional SSH Keys to be created
    - name: Create SSH Key directory for $USERNAME
      file:
        path: /home/$USERNAME/.ssh
        state: directory
        mode: 0700
        owner: $USERNAME
        group: $USERNAME

# Create SSH Key file:
    - name: Create authorized_keys file for $USERNAME
      file:
        path: /home/$USERNAME/.ssh/authorized_keys
        mode: 0600
        state: touch
        owner: $USERNAME
        group: $USERNAME

  
# Copy authorized_keys:
    - name: Copy over the authorized_keys config for $USERNAME
      template: src='{{ conf_location }}/authorized_keys_user.conf' dest=/home/$USERNAME/.ssh/authorized_keys 
    

# Copy SSHD config:
    - name: Copy over the SSHD config
      template: src='{{ conf_location }}/sshd.conf' dest=/etc/ssh/sshd_config

# Copy sudo config:
    - name: Copy over the sudoers config
      template: src='{{ conf_location }}/sudo.conf' dest=/etc/sudoers

# Restart SSHD: 
    - name: Restart SSHD
      systemd:
        name: ssh.service
        state: restarted